// REQUIRES: TARGET-GCUALL
// RUN: choreo -gs -t factor -kt %s -o %s.result && bash %s.result --execute | FileCheck --match-full-lines %s
// RUN: choreo -gs -t topscc -kt %s -o %s.topscc.result && bash %s.topscc.result --execute | FileCheck --match-full-lines %s && rm -f %s.topscc.result
// RUN-DOCKER: choreo -st -t topscc %s -o %s.result && %s.result | FileCheck --match-full-lines %s

#include "choreo.h"
#include <chrono>

__cok__ { /// kernel program

template<int m, int n>
__co_device__ void relu_kernel(float* input, float* out) {
  for (int i = 0; i < m; ++i) {
    for (int j = 0; j < n; ++j) {
      out[i*n+j] = input[i*n+j] > 0.0f ? input[i*n+j] : 0.0f;
    }
  }
}

} /// end of kernel decl


__co__ f32 [128, 256] relu(f32 [128, 256] input) { /// device program
  f32[input.span(0), input.span(1)] output; // use same shape as input

  parallel p by 2 {  // p is sip_index
    with index = {n_tile} in [1] {  // decl your tiled spans
      foreach n_tile {
        shared f32[input.span(0)/#p, input.span(1)/#n_tile] l2_out;
        input_load = dma.copy.async input.chunkat(p, n_tile) => shared;
        wait input_load;
        parallel q by 2 {
          with index = {n_tile_s} in [4] {
            foreach n_tile_s {
              input_load_s = dma.copy.async input_load.data.chunkat(q, n_tile_s) => local;
              out_load_s = dma.copy.async l2_out.chunkat(q, n_tile_s) => local;
              wait input_load_s, out_load_s;
              call relu_kernel<input.span(0)/#p/#q, input.span(1)/#n_tile_s>(input_load_s.data, out_load_s.data); // |span| calculate the total size of span.
              out_store_s = dma.copy.async out_load_s.data => l2_out.chunkat(q, n_tile_s); // can use defined vars
              wait out_store_s;
            }
          }
        }
        out_store = dma.copy.async l2_out => output.chunkat(p, n_tile); // can use defined vars
        wait out_store;
      }
    }
  } // can use python styling
  return output;
}


int main() { /// host program
  choreo::f32 a[128][256]; // unified abstraction in choreo type system, no need for C++ vectors/uint8_t, no factor Data/Mem types, we handles the bridge choreo::f32 b[128][128] = {0};

  auto input_data = choreo::make_spanview<2, choreo::f32>((float*)a, {128, 256});
  input_data.fill_random(-1.0, 1.0);

  auto start = std::chrono::high_resolution_clock::now();

  auto res
    = relu(input_data);

  auto end = std::chrono::high_resolution_clock::now();
  auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);

  std::cout << res.shape()[0] << std::endl;
  std::cout << res.shape()[1] << std::endl;

  // verfication
  for (size_t i = 0; i < res.shape()[0]; ++i)
    for (size_t j = 0; j < res.shape()[1]; ++j) {
        // std::cout << "i: " << i << ", j: " << j << "\n";
        // std::cout << "res: " << res[i][j] << "\n";
        float ref = input_data[i][j] > 0? input_data[i][j] : 0;

        // std::cout << "ref: " << ref << std::endl;
        choreo::choreo_assert(ref == res[i][j], "values are not equal.");
      }
  std::cout << "Test Passed\n" << std::endl;
  std::cout << "Function execution time: " << duration.count() << " microseconds" << std::endl;
}
// CHECK: Test Passed
